Việc tạo level vô tận có thể thực hiện bằng cách sử dụng các kỹ thuật như tạo map động, tải các tệp tin map từng phần hoặc sử dụng các thuật toán sinh ngẫu nhiên.

-> Em chọn kỹ thuật tạo map động:

-Tạo một bản đồ mặc định ban đầu, khi người chơi di chuyển đến bên phải của bản đồ, chúng ta sẽ tạo một bản đồ mới và giải phóng bản đồ cũ.

-Để làm được điều này, chúng ta sử dụng một vector chứa các bản đồ, mỗi bản đồ được lưu trữ dưới dạng một vector các tiles.

-Đầu tiên, ta cần định nghĩa một số hằng số để mô tả kích thước của các tiles và của bản đồ, cũng như số lượng tiles mà một bản đồ cần có. Sau đó, ta sẽ tạo ra một bản đồ mặc định đầu tiên bằng cách sử dụng hàm initMap()

-Mỗi lần người chơi di chuyển đến bên phải của bản đồ hiện tại, chúng ta sẽ tạo một bản đồ mới và giải phóng bản đồ cũ bằng cách sử dụng hàm updateMap(). Chúng ta cũng sẽ kiểm tra xem người chơi có vượt quá giới hạn bản đồ chưa bằng cách sử dụng hàm checkBoundaries().

---CODE THAM KHAO---
```#include <iostream>
#include <vector>
#include <SDL2/SDL.h>

const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
const int TILE_SIZE = 32;
const int MAP_WIDTH = SCREEN_WIDTH * 2;
const int MAP_HEIGHT = SCREEN_HEIGHT;
const int TILES_PER_MAP = MAP_WIDTH / TILE_SIZE;

SDL_Window* gWindow = nullptr;
SDL_Renderer* gRenderer = nullptr;

struct Tile {
    int id;
    int x;
    int y;
    int w;
    int h;
};

void initMap(std::vector<std::vector<Tile>>& maps) {
    std::vector<Tile> map(TILES_PER_MAP);
    for (int i = 0; i < TILES_PER_MAP; ++i) {
        Tile t = { 0, i * TILE_SIZE, 0, TILE_SIZE, TILE_SIZE };
        map[i] = t;
    }
    maps.push_back(map);
}

void updateMap(std::vector<std::vector<Tile>>& maps, int& currentMap) {
    if (currentMap == maps.size() - 1) {
        std::vector<Tile> newMap(TILES_PER_MAP);
        for (int i = 0; i < TILES_PER_MAP; ++i) {
            Tile t = { 0, (currentMap + 1) * MAP_WIDTH + i * TILE_SIZE, 0, TILE_SIZE, TILE_SIZE };
            newMap[i] = t;
        }
        maps.push_back(newMap);
    }
    if (
```